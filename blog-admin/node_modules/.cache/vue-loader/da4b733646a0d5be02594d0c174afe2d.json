{"remainingRequest":"E:\\projects\\blog\\blog-admin\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!E:\\projects\\blog\\blog-admin\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!E:\\projects\\blog\\blog-admin\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\projects\\blog\\blog-admin\\src\\views\\site\\friendLink\\index.vue?vue&type=template&id=7deb5e59&","dependencies":[{"path":"E:\\projects\\blog\\blog-admin\\src\\views\\site\\friendLink\\index.vue","mtime":1681388325326},{"path":"E:\\projects\\blog\\blog-admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1680778862035},{"path":"E:\\projects\\blog\\blog-admin\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1680778857392},{"path":"E:\\projects\\blog\\blog-admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1680778862035},{"path":"E:\\projects\\blog\\blog-admin\\node_modules\\vue-loader\\lib\\index.js","mtime":1680778857385}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}