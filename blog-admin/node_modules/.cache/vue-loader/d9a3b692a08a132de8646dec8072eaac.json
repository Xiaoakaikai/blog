{"remainingRequest":"D:\\javaResource\\shiyi-blog-master\\blog-admin\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\javaResource\\shiyi-blog-master\\blog-admin\\src\\views\\articles\\index.vue?vue&type=template&id=f70f99cc&","dependencies":[{"path":"D:\\javaResource\\shiyi-blog-master\\blog-admin\\src\\views\\articles\\index.vue","mtime":1675760965000},{"path":"D:\\javaResource\\shiyi-blog-master\\blog-admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1680778862035},{"path":"D:\\javaResource\\shiyi-blog-master\\blog-admin\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1680778857392},{"path":"D:\\javaResource\\shiyi-blog-master\\blog-admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1680778862035},{"path":"D:\\javaResource\\shiyi-blog-master\\blog-admin\\node_modules\\vue-loader\\lib\\index.js","mtime":1680778857385}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CiAgPGRpdiBjbGFzcz0iYXBwLWNvbnRhaW5lciI+CiAgICA8IS0t5p+l6K+ib3Lmt7vliqAtLT4KICAgIDxlbC1mb3JtIHYtc2hvdz0ic2hvd1NlYXJjaCIgOmlubGluZT0idHJ1ZSIgcmVmPSJmb3JtIiA6bW9kZWw9InBhcmFtcyIgbGFiZWwtd2lkdGg9IjY4cHgiPgogICAgICA8ZWwtZm9ybS1pdGVtIGxhYmVsPSLmlofnq6DlkI3np7AiPgogICAgICAgIDxlbC1pbnB1dCBzdHlsZT0id2lkdGg6IDE1MHB4IiBzaXplPSJzbWFsbCIgdi1tb2RlbD0icGFyYW1zLnRpdGxlIiBwbGFjZWhvbGRlcj0i6K+36L6T5YWl5paH56ug5ZCN56ewIi8+CiAgICAgIDwvZWwtZm9ybS1pdGVtPgogICAgICA8ZWwtZm9ybS1pdGVtIGxhYmVsPSLmoIfnrb7lkI0iPgogICAgICAgIDxlbC1zZWxlY3Qgc3R5bGU9IndpZHRoOiAxMzBweCIgc2l6ZT0ic21hbGwiIHYtbW9kZWw9InBhcmFtcy50YWdJZCIgZmlsdGVyYWJsZSBjbGVhcmFibGUgcmVzZXJ2ZS1rZXl3b3JkCiAgICAgICAgICAgICAgICAgICBAY2hhbmdlPSdoYW5kbGVGaW5kJyBwbGFjZWhvbGRlcj0i6K+36YCJ5oup5qCH562+IgogICAgICAgID4KICAgICAgICAgIDxlbC1vcHRpb24gdi1mb3I9Iml0ZW0gaW4gdGFncyIgOmtleT0iaXRlbS5pZCIgOmxhYmVsPSJpdGVtLm5hbWUiIDp2YWx1ZT0iaXRlbS5pZCIvPgogICAgICAgIDwvZWwtc2VsZWN0PgogICAgICA8L2VsLWZvcm0taXRlbT4KICAgICAgPGVsLWZvcm0taXRlbSBsYWJlbD0i5YiG57G75ZCNIj4KICAgICAgICA8ZWwtc2VsZWN0IHN0eWxlPSJ3aWR0aDogMTMwcHgiIHNpemU9InNtYWxsIiB2LW1vZGVsPSJwYXJhbXMuY2F0ZWdvcnlJZCIgZmlsdGVyYWJsZSBjbGVhcmFibGUgcmVzZXJ2ZS1rZXl3b3JkCiAgICAgICAgICAgICAgICAgICBAY2hhbmdlPSdoYW5kbGVGaW5kJyBwbGFjZWhvbGRlcj0i6K+36YCJ5oup5YiG57G7IgogICAgICAgID4KICAgICAgICAgIDxlbC1vcHRpb24gdi1mb3I9Iml0ZW0gaW4gY2F0ZWdvcnkiIDprZXk9Iml0ZW0uaWQiIDpsYWJlbD0iaXRlbS5uYW1lIiA6dmFsdWU9Iml0ZW0uaWQiLz4KICAgICAgICA8L2VsLXNlbGVjdD4KICAgICAgPC9lbC1mb3JtLWl0ZW0+CiAgICAgIDxlbC1mb3JtLWl0ZW0gbGFiZWw9IuWPkeW4g+eKtuaAgSI+CiAgICAgICAgPGVsLXNlbGVjdCBzdHlsZT0id2lkdGg6IDEzMHB4IiBzaXplPSJzbWFsbCIgdi1tb2RlbD0icGFyYW1zLmlzUHVibGlzaCIgZmlsdGVyYWJsZSBjbGVhcmFibGUgcmVzZXJ2ZS1rZXl3b3JkCiAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj0i5piv5ZCm5Y+R5biDIiBAY2hhbmdlPSdoYW5kbGVGaW5kJz4KICAgICAgICAgIDxlbC1vcHRpb24gdi1mb3I9IihpdGVtLGluZGV4KSBpbiBwdWJsaXNoTGlzdCIgOmtleT0iaW5kZXgiIDpsYWJlbD0iaXRlbSIgOnZhbHVlPSJpbmRleCIvPgogICAgICAgIDwvZWwtc2VsZWN0PgogICAgICA8L2VsLWZvcm0taXRlbT4KICAgICAgPGVsLWZvcm0taXRlbT4KICAgICAgICA8ZWwtYnV0dG9uIHR5cGU9InByaW1hcnkiIGljb249ImVsLWljb24tc2VhcmNoIiBzaXplPSJzbWFsbCIgQGNsaWNrPSJoYW5kbGVGaW5kIj7mn6Xmib48L2VsLWJ1dHRvbj4KICAgICAgICA8ZWwtYnV0dG9uIGljb249ImVsLWljb24tcmVmcmVzaCIgc2l6ZT0ic21hbGwiIEBjbGljaz0icmVzZXRRdWVyeSI+6YeN572uPC9lbC1idXR0b24+CiAgICAgIDwvZWwtZm9ybS1pdGVtPgogICAgPC9lbC1mb3JtPgogICAgPGVsLXJvdyA6Z3V0dGVyPSIxMCIgY2xhc3M9Im1iOCI+CiAgICAgIDxlbC1jb2wgOnNwYW49IjEuNSI+CiAgICAgICAgPGVsLWJ1dHRvbiB2LWlmPSJjYW5BZGQiIHNpemU9InNtYWxsIiBjbGFzcz0iZmlsdGVyLWl0ZW0iIEBjbGljaz0iaGFuZGxlQWRkIiB0eXBlPSJwcmltYXJ5IgogICAgICAgICAgICAgICAgICAgaWNvbj0iZWwtaWNvbi1wbHVzIj7mt7vliqAKICAgICAgICA8L2VsLWJ1dHRvbj4KICAgICAgPC9lbC1jb2w+CiAgICAgIDxlbC1jb2wgOnNwYW49IjEuNSI+CiAgICAgICAgPGVsLWJ1dHRvbiB2LWlmPSJjYW5SZXB0aWxlIiBzaXplPSJzbWFsbCIgY2xhc3M9ImZpbHRlci1pdGVtIiBAY2xpY2s9ImRpYWxvZ1RhYmxlVmlzaWJsZSA9IHRydWUiIHR5cGU9InByaW1hcnkiCiAgICAgICAgICAgICAgICAgICBpY29uPSJlbC1pY29uLWNwdSI+5paH56ug5oqT5Y+WCiAgICAgICAgPC9lbC1idXR0b24+CiAgICAgIDwvZWwtY29sPgogICAgICA8ZWwtY29sIDpzcGFuPSIxLjUiPgogICAgICAgIDxlbC1idXR0b24gc2l6ZT0ic21hbGwiIHYtaWY9ImNhblVwZGF0ZSIgOmRpc2FibGVkPSIhbXVsdGlwbGVTZWxlY3Rpb24ubGVuZ3RoIiBjbGFzcz0iZmlsdGVyLWl0ZW0iIEBjbGljaz0ic2VvIgogICAgICAgICAgICAgICAgICAgdHlwZT0iaW5mbyIKICAgICAgICAgICAgICAgICAgIGljb249ImVsLWljb24tcG9zaXRpb24iPuaJuemHj1NFTwogICAgICAgIDwvZWwtYnV0dG9uPgogICAgICA8L2VsLWNvbD4KICAgICAgPGVsLWNvbCA6c3Bhbj0iMS41Ij4KICAgICAgICA8ZWwtYnV0dG9uIHNpemU9InNtYWxsIiA6ZGlzYWJsZWQ9IiFtdWx0aXBsZVNlbGVjdGlvbi5sZW5ndGgiIHYtaWY9ImNhbkRlbEJhdGNoIiBjbGFzcz0iZmlsdGVyLWl0ZW0iIEBjbGljaz0iaGFuZGxlRGVsZXRlIgogICAgICAgICAgICAgICAgICAgdHlwZT0iZGFuZ2VyIgogICAgICAgICAgICAgICAgICAgaWNvbj0iZWwtaWNvbi1kZWxldGUiPuaJuemHj+WIoOmZpAogICAgICAgIDwvZWwtYnV0dG9uPgogICAgICA8L2VsLWNvbD4KICAgICAgPHJpZ2h0LXRvb2xiYXIgOnNob3dTZWFyY2guc3luYz0ic2hvd1NlYXJjaCIgQHF1ZXJ5VGFibGU9InF1ZXJ5TGlzdCI+PC9yaWdodC10b29sYmFyPgogICAgPC9lbC1yb3c+CgogICAgPCEtLeihqOagvOWMuuWfny0tPgogICAgPGRpdiBzdHlsZT0ibWFyZ2luLXRvcDogNXB4Ij4KICAgICAgPGVsLXRhYmxlCiAgICAgICAgYm9yZGVyCiAgICAgICAgOmRhdGE9InRhYmxlRGF0YSIKICAgICAgICBzdHlsZT0id2lkdGg6IDEwMCUiCiAgICAgICAgQHNlbGVjdGlvbi1jaGFuZ2U9ImhhbmRsZVNlbGVjdGlvbkNoYW5nZSI+CiAgICAgICAgPGVsLXRhYmxlLWNvbHVtbiB3aWR0aD0iNjAiIGFsaWduPSJjZW50ZXIiIHR5cGU9InNlbGVjdGlvbiIvPgogICAgICAgIDxlbC10YWJsZS1jb2x1bW4KICAgICAgICAgIHdpZHRoPSIxNzAiCiAgICAgICAgICBhbGlnbj0iY2VudGVyIgogICAgICAgICAgbGFiZWw9IuaWh+eroOWwgemdoiI+CiAgICAgICAgICA8dGVtcGxhdGUgc2xvdC1zY29wZT0ic2NvcGUiPgogICAgICAgICAgICA8ZWwtaW1hZ2UKICAgICAgICAgICAgICBjbGFzcz0iYXJ0aWNsZS1jb3ZlciIKICAgICAgICAgICAgICA6c3JjPSJzY29wZS5yb3cuYXZhdGFyIgogICAgICAgICAgICAgLz4KICAgICAgICAgICAgPGkgaWQ9ImltZ0ljb24iCiAgICAgICAgICAgICAgOmNsYXNzPSJzY29wZS5yb3cuaXNTZWNyZXQgPT09IDA/J2VsLWljb24tdmlldyc6J2VsLWljb24tbG9jayciCiAgICAgICAgICAgIC8+CiAgICAgICAgICA8L3RlbXBsYXRlPgogICAgICAgIDwvZWwtdGFibGUtY29sdW1uPgogICAgICAgIDxlbC10YWJsZS1jb2x1bW4gcHJvcD0idGl0bGUiIGFsaWduPSJjZW50ZXIiIGxhYmVsPSLmlofnq6DlkI3np7AiIHdpZHRoPSIyMjAiPgogICAgICAgICAgPHRlbXBsYXRlIHNsb3Qtc2NvcGU9InNjb3BlIj4KICAgICAgICAgICAgPGVsLWxpbmsgOnVuZGVybGluZT0iZmFsc2UiIEBjbGljaz0ib25DbGljayhzY29wZS5yb3cpIj57eyBzY29wZS5yb3cudGl0bGUgfX08L2VsLWxpbms+CiAgICAgICAgICA8L3RlbXBsYXRlPgogICAgICAgIDwvZWwtdGFibGUtY29sdW1uPgo8IS0tICAgICAgICA8ZWwtdGFibGUtY29sdW1uIHByb3A9InN1bW1hcnkiIGFsaWduPSJjZW50ZXIiIHdpZHRoPSIxODAiIDpzaG93LW92ZXJmbG93LXRvb2x0aXA9InRydWUiIGxhYmVsPSLmlofnq6DnroDku4siLz4tLT4KICAgICAgICA8ZWwtdGFibGUtY29sdW1uIGFsaWduPSJjZW50ZXIiIHdpZHRoPSIxMTYiIGxhYmVsPSLnsbvlnosiPgogICAgICAgICAgPHRlbXBsYXRlIHNsb3Qtc2NvcGU9InNjb3BlIj4KICAgICAgICAgICAgPGVsLXRhZwogICAgICAgICAgICAgIDp0eXBlPSJzY29wZS5yb3cuaXNPcmlnaW5hbCA9PT0gMD8nd2FybmluZyc6J3N1Y2Nlc3MnIgogICAgICAgICAgICAgIDprZXk9ImluZGV4IgogICAgICAgICAgICAgIHYtaWY9InNjb3BlLnJvdy5pc09yaWdpbmFsPT09aW5kZXgiCiAgICAgICAgICAgICAgdi1mb3I9IihpdGVtLCBpbmRleCkgaW4gaXNPcmlnaW5hbExpc3QiCiAgICAgICAgICAgID57eyBpdGVtIH19IDwvZWwtdGFnPgogICAgICAgICAgPC90ZW1wbGF0ZT4KICAgICAgICA8L2VsLXRhYmxlLWNvbHVtbj4KICAgICAgICA8ZWwtdGFibGUtY29sdW1uIGFsaWduPSJjZW50ZXIiIHdpZHRoPSIxMjUiIGxhYmVsPSLliIbnsbsiPgogICAgICAgICAgPHRlbXBsYXRlIHNsb3Qtc2NvcGU9InNjb3BlIj4KICAgICAgICAgICAgPGVsLXRhZwogICAgICAgICAgICAgIHN0eWxlPSJtYXJnaW4tbGVmdDogM3B4IgogICAgICAgICAgICAgIGFsaWduPSJjZW50ZXIiCiAgICAgICAgICAgICAgdHlwZT0id2FybmluZyIKICAgICAgICAgICAgPnt7IHNjb3BlLnJvdy5jYXRlZ29yeU5hbWUgfX0KICAgICAgICAgICAgPC9lbC10YWc+CiAgICAgICAgICA8L3RlbXBsYXRlPgogICAgICAgIDwvZWwtdGFibGUtY29sdW1uPgogICAgICAgIDxlbC10YWJsZS1jb2x1bW4KICAgICAgICAgIGFsaWduPSJjZW50ZXIiCiAgICAgICAgICB3aWR0aD0iMjIwIgogICAgICAgICAgbGFiZWw9Iuagh+etviI+CiAgICAgICAgICA8dGVtcGxhdGUgc2xvdC1zY29wZT0ic2NvcGUiPgogICAgICAgICAgICA8ZWwtdGFnCiAgICAgICAgICAgICAgc3R5bGU9Im1hcmdpbi1sZWZ0OiAzcHgiCiAgICAgICAgICAgICAgYWxpZ249ImNlbnRlciIKICAgICAgICAgICAgICB0eXBlPSJwcmltYXJ5IgogICAgICAgICAgICAgIHYtZm9yPSIoaXRlbSkgaW4gc3RyU3BsaXQoc2NvcGUucm93LnRhZ05hbWVzKSIKICAgICAgICAgICAgPnt7aXRlbX19CiAgICAgICAgICAgIDwvZWwtdGFnPgogICAgICAgICAgPC90ZW1wbGF0ZT4KICAgICAgICA8L2VsLXRhYmxlLWNvbHVtbj4KICAgICAgICA8ZWwtdGFibGUtY29sdW1uCiAgICAgICAgICBwcm9wPSJpc1N0aWNrIgogICAgICAgICAgYWxpZ249ImNlbnRlciIKICAgICAgICAgIHdpZHRoPSIxMjAiCiAgICAgICAgICBsYWJlbD0i572u6aG2Ij4KICAgICAgICAgIDx0ZW1wbGF0ZSBzbG90LXNjb3BlPSJzY29wZSI+CiAgICAgICAgICAgIDxlbC1zd2l0Y2gKICAgICAgICAgICAgICB2LW1vZGVsPSJzY29wZS5yb3cuaXNTdGljayIKICAgICAgICAgICAgICA6YWN0aXZlLXZhbHVlPSIxIgogICAgICAgICAgICAgIDppbmFjdGl2ZS12YWx1ZT0iMCIKICAgICAgICAgICAgICBAY2hhbmdlPSJoYW5kbGVUb3Aoc2NvcGUpIgogICAgICAgICAgICAgIGFjdGl2ZS1jb2xvcj0iIzEzY2U2NiI+CiAgICAgICAgICAgIDwvZWwtc3dpdGNoPgogICAgICAgICAgPC90ZW1wbGF0ZT4KICAgICAgICA8L2VsLXRhYmxlLWNvbHVtbj4KICAgICAgICA8ZWwtdGFibGUtY29sdW1uIHByb3A9InF1YW50aXR5IiB3aWR0aD0iMTIwIiBhbGlnbj0iY2VudGVyIiBsYWJlbD0i5rWP6KeI6YePIiAvPgogICAgICAgIDxlbC10YWJsZS1jb2x1bW4KICAgICAgICAgIHdpZHRoPSIyMDAiCiAgICAgICAgICBhbGlnbj0iY2VudGVyIgogICAgICAgICAgcHJvcD0iY3JlYXRlVGltZSIKICAgICAgICAgIHNvcnRhYmxlCiAgICAgICAgICBsYWJlbD0i5re75Yqg5pe26Ze0Ij4KICAgICAgICAgIDx0ZW1wbGF0ZSBzbG90LXNjb3BlPSJzY29wZSI+CiAgICAgICAgICAgIDxzcGFuPnt7IGRhdGFGb3JtYXQoc2NvcGUucm93LmNyZWF0ZVRpbWUpIH19PC9zcGFuPgogICAgICAgICAgPC90ZW1wbGF0ZT4KICAgICAgICA8L2VsLXRhYmxlLWNvbHVtbj4KICAgICAgICA8ZWwtdGFibGUtY29sdW1uIHdpZHRoPSIzMDAiIGFsaWduPSJjZW50ZXIiIGxhYmVsPSLmk43kvZwiPgogICAgICAgICAgPHRlbXBsYXRlIHNsb3Qtc2NvcGU9InNjb3BlIj4KICAgICAgICAgICAgPGVsLWJ1dHRvbiB2LWlmPSJjYW5VcGRhdGUmJiBzY29wZS5yb3cuaXNQdWJsaXNoID09PSAxIiB0eXBlPSJpbmZvIiBzaXplPSJtaW5pIiBAY2xpY2s9Im9mZlNoZWxmKHNjb3BlKSI+CiAgICAgICAgICAgICAg5LiL5p62CiAgICAgICAgICAgIDwvZWwtYnV0dG9uPgogICAgICAgICAgICA8ZWwtYnV0dG9uIHYtaWY9ImNhblVwZGF0ZSYmIHNjb3BlLnJvdy5pc1B1Ymxpc2ggPT09IDAiIHR5cGU9InN1Y2Nlc3MiIHNpemU9Im1pbmkiIEBjbGljaz0icmVsZWFzZShzY29wZSkiPgogICAgICAgICAgICAgIOWPkeW4gwogICAgICAgICAgICA8L2VsLWJ1dHRvbj4KICAgICAgICAgICAgPGVsLWJ1dHRvbiB2LWlmPSJjYW5VcGRhdGUiIHR5cGU9InByaW1hcnkiIHNpemU9Im1pbmkiIEBjbGljaz0iaGFuZGxlVXBkYXRlKHNjb3BlKSI+57yW6L6RPC9lbC1idXR0b24+CiAgICAgICAgICAgIDxlbC1idXR0b24gdi1pZj0iY2FuRGVsIiBzaXplPSJtaW5pIiB0eXBlPSJkYW5nZXIiIEBjbGljaz0icmVtb3ZlKHNjb3BlKSI+5Yig6ZmkPC9lbC1idXR0b24+CiAgICAgICAgICA8L3RlbXBsYXRlPgogICAgICAgIDwvZWwtdGFibGUtY29sdW1uPgogICAgICA8L2VsLXRhYmxlPgoKICAgICAgPCEtLeWIhumhteWMuuWfny0tPgogICAgICA8ZGl2IGNsYXNzPSJwYWdpbmF0aW9uLWNvbnRhaW5lciIgc3R5bGU9ImZsb2F0OiByaWdodDttYXJnaW4tYm90dG9tOiAxLjI1cmVtO21hcmdpbi10b3A6IDEuMjVyZW07Ij4KICAgICAgICA8ZWwtcGFnaW5hdGlvbiBiYWNrZ3JvdW5kIEBzaXplLWNoYW5nZT0iaGFuZGxlU2l6ZUNoYW5nZSIgQGN1cnJlbnQtY2hhbmdlPSJoYW5kbGVDdXJyZW50Q2hhbmdlIgogICAgICAgICAgICAgICAgICAgICAgIDpjdXJyZW50LXBhZ2U9InBhcmFtcy5wYWdlTm8iIDpwYWdlLXNpemU9InBhcmFtcy5wYWdlU2l6ZSIgOnBhZ2Utc2l6ZXM9IlsxMCwgMjAsIDMwXSIKICAgICAgICAgICAgICAgICAgICAgICBsYXlvdXQ9InRvdGFsLCBzaXplcyxwcmV2LCBwYWdlciwgbmV4dCxqdW1wZXIiIDp0b3RhbD0idG90YWwiPgogICAgICAgIDwvZWwtcGFnaW5hdGlvbj4KICAgICAgPC9kaXY+CgogICAgICA8IS0t5re75Yqgb3Lkv67mlLnljLrln58tLT4KICAgICAgPGVsLWRpYWxvZwogICAgICAgIDp0aXRsZT0idGl0bGUiCiAgICAgICAgOnZpc2libGUuc3luYz0iY2VudGVyRGlhbG9nVmlzaWJsZSIKICAgICAgICA6YmVmb3JlLWNsb3NlPSJjbG9zZU1vZGVsIgogICAgICAgIGZ1bGxzY3JlZW4KICAgICAgICBjZW50ZXIKICAgICAgPgogICAgICAgIDxlbC1mb3JtIDpydWxlcz0icnVsZXMiIHJlZj0iZGF0YUZvcm0iIDptb2RlbD0iYXJ0aWNsZSIgc3R5bGU9Im1hcmdpbi10b3A6IDEwcHgiPgogICAgICAgICAgPGVsLXJvdz4KICAgICAgICAgICAgPGVsLWNvbCA6c3Bhbj0iMTQiPgogICAgICAgICAgICAgIDxlbC1mb3JtLWl0ZW0gbGFiZWw9IuaWh+eroOWQjeensCIgOmxhYmVsLXdpZHRoPSJmb3JtTGFiZWxXaWR0aCIgcHJvcD0idGl0bGUiPgogICAgICAgICAgICAgICAgPGVsLWlucHV0IHYtbW9kZWw9ImFydGljbGUudGl0bGUiIGF1dG8tY29tcGxldGU9Im9mZiI+PC9lbC1pbnB1dD4KICAgICAgICAgICAgICA8L2VsLWZvcm0taXRlbT4KICAgICAgICAgICAgICA8ZWwtZm9ybS1pdGVtIGxhYmVsPSLmlofnq6DnroDku4siIDpsYWJlbC13aWR0aD0iZm9ybUxhYmVsV2lkdGgiIHByb3A9InN1bW1hcnkiPgogICAgICAgICAgICAgICAgPGVsLWlucHV0IGF1dG8tY29tcGxldGU9Im9mZiIgdi1tb2RlbD0iYXJ0aWNsZS5zdW1tYXJ5IiA+PC9lbC1pbnB1dD4KICAgICAgICAgICAgICA8L2VsLWZvcm0taXRlbT4KICAgICAgICAgICAgPC9lbC1jb2w+CiAgICAgICAgICAgIDxlbC1jb2wgOnNwYW49IjgiPgogICAgICAgICAgICAgIDxlbC1mb3JtLWl0ZW0gbGFiZWw9Iuagh+mimOWbviIgOmxhYmVsLXdpZHRoPSJmb3JtTGFiZWxXaWR0aCI+CiAgICAgICAgICAgICAgICA8ZWwtY29sIDpzcGFuPSIyIj4KICAgICAgICAgICAgICAgICAgPGVsLXBvcG92ZXIKICAgICAgICAgICAgICAgICAgICBwbGFjZW1lbnQ9InRvcCIKICAgICAgICAgICAgICAgICAgICB3aWR0aD0iMTYwIgogICAgICAgICAgICAgICAgICAgIHRyaWdnZXI9ImhvdmVyIgogICAgICAgICAgICAgICAgICAgIHYtbW9kZWw9InZpc2libGUiPgogICAgICAgICAgICAgICAgICAgIDxwPumaj+acuuiOt+WPluS4gOW8oOWbvueJhzwvcD4KICAgICAgICAgICAgICAgICAgICA8ZGl2IHN0eWxlPSJ0ZXh0LWFsaWduOiByaWdodDsgbWFyZ2luOiAwIj4KICAgICAgICAgICAgICAgICAgICAgIDxlbC1idXR0b24gc2l6ZT0ibWluaSIgdHlwZT0idGV4dCIgQGNsaWNrPSJ2aXNpYmxlID0gZmFsc2UiPuWPlua2iDwvZWwtYnV0dG9uPgogICAgICAgICAgICAgICAgICAgICAgPGVsLWJ1dHRvbiB0eXBlPSJwcmltYXJ5IiBzaXplPSJtaW5pIiBAY2xpY2s9InJhbmRvbUltZygpIj7noa7lrpo8L2VsLWJ1dHRvbj4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8c3ZnLWljb24gc2xvdD0icmVmZXJlbmNlIiBpY29uLWNsYXNzPSJ3ZW5oYW8iIC8+CiAgICAgICAgICAgICAgICAgIDwvZWwtcG9wb3Zlcj4KICAgICAgICAgICAgICAgIDwvZWwtY29sPgogICAgICAgICAgICAgICAgPGVsLWNvbCA6c3Bhbj0iMiI+CiAgICAgICAgICAgICAgICAgIDxlbC11cGxvYWQKICAgICAgICAgICAgICAgICAgICBzdHlsZT0id2lkdGg6IDgwcHg7aGVpZ2h0OiA4MHB4IgogICAgICAgICAgICAgICAgICAgIGNsYXNzPSJhdmF0YXItdXBsb2FkZXIiCiAgICAgICAgICAgICAgICAgICAgOnNob3ctZmlsZS1saXN0PSJmYWxzZSIKICAgICAgICAgICAgICAgICAgICByZWY9InVwbG9hZCIKICAgICAgICAgICAgICAgICAgICBuYW1lPSJmaWxlZGF0YXMiCiAgICAgICAgICAgICAgICAgICAgOmFjdGlvbj0idXBsb2FkUGljdHVyZUhvc3QiCiAgICAgICAgICAgICAgICAgICAgOmJlZm9yZS11cGxvYWQ9InVwbG9hZEJlZm9yZSIKICAgICAgICAgICAgICAgICAgICA6aHR0cC1yZXF1ZXN0PSJ1cGxvYWRTZWN0aW9uRmlsZSIKICAgICAgICAgICAgICAgICAgICBtdWx0aXBsZT4KICAgICAgICAgICAgICAgICAgICA8aW1nIHYtaWY9ImFydGljbGUuYXZhdGFyIiA6c3JjPSJhcnRpY2xlLmF2YXRhciIgY2xhc3M9ImltZ0F2YXRhciI+CiAgICAgICAgICAgICAgICAgICAgPGkgdi1lbHNlIGNsYXNzPSJlbC1pY29uLXBsdXMgYXZhdGFyLWltZy1pY29uIj48L2k+CiAgICAgICAgICAgICAgICAgIDwvZWwtdXBsb2FkPgogICAgICAgICAgICAgICAgPC9lbC1jb2w+CgogICAgICAgICAgICAgIDwvZWwtZm9ybS1pdGVtPgogICAgICAgICAgICA8L2VsLWNvbD4KICAgICAgICAgIDwvZWwtcm93PgogICAgICAgICAgPGVsLXJvdz4KICAgICAgICAgICAgPGVsLWNvbCA6c3Bhbj0iNi41Ij4KICAgICAgICAgICAgICA8ZWwtZm9ybS1pdGVtIGxhYmVsPSLmoIfnrb4iIDpsYWJlbC13aWR0aD0iZm9ybUxhYmVsV2lkdGgiIHByb3A9InRhZ3MiPgogICAgICAgICAgICAgICAgPGVsLXRhZwogICAgICAgICAgICAgICAgICB2LWZvcj0iKGl0ZW0sIGluZGV4KSBvZiBhcnRpY2xlLnRhZ3MiCiAgICAgICAgICAgICAgICAgIDprZXk9ImluZGV4IgogICAgICAgICAgICAgICAgICBzdHlsZT0ibWFyZ2luOjAgMXJlbSAwIDAiCiAgICAgICAgICAgICAgICAgIDpjbG9zYWJsZT0idHJ1ZSIKICAgICAgICAgICAgICAgICAgQGNsb3NlPSJyZW1vdmVUYWcoaXRlbSkiCiAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgIHt7IGl0ZW0gfX0KICAgICAgICAgICAgICAgIDwvZWwtdGFnPgogICAgICAgICAgICAgICAgPCEtLSDmoIfnrb7pgInpobkgLS0+CiAgICAgICAgICAgICAgICA8ZWwtcG9wb3ZlcgogICAgICAgICAgICAgICAgICBwbGFjZW1lbnQ9ImJvdHRvbS1zdGFydCIKICAgICAgICAgICAgICAgICAgd2lkdGg9IjQ2MCIKICAgICAgICAgICAgICAgICAgdHJpZ2dlcj0iY2xpY2siCiAgICAgICAgICAgICAgICAgIHYtaWY9ImFydGljbGUudGFncyAmJiBhcnRpY2xlLnRhZ3MubGVuZ3RoIDwgMyIKICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icG9wb3Zlci10aXRsZSI+5qCH562+PC9kaXY+CiAgICAgICAgICAgICAgICAgIDwhLS0g5pCc57Si5qGGIC0tPgogICAgICAgICAgICAgICAgICA8ZWwtaW5wdXQgc3R5bGU9IndpZHRoOjEwMCUiIHYtbW9kZWw9InRhZ05hbWUiIHBsYWNlaG9sZGVyPSLor7fovpPlhaXmoIfnrb7lkI0sZW50ZXLmt7vliqDoh6rlrprkuYnmoIfnrb4iCiAgICAgICAgICAgICAgICAgICAgQGtleXVwLmVudGVyLm5hdGl2ZT0ic2F2ZVRhZyIgLz4KICAgICAgICAgICAgICAgICAgPCEtLSDmoIfnrb4gLS0+CiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBvcG92ZXItY29udGFpbmVyIj4KICAgICAgICAgICAgICAgICAgICA8ZGl2ID7mt7vliqDmoIfnrb48L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8ZWwtdGFnCiAgICAgICAgICAgICAgICAgICAgICB2LWZvcj0iKGl0ZW0sIGluZGV4KSBvZiB0YWdzIgogICAgICAgICAgICAgICAgICAgICAgOmtleT0iaW5kZXgiCiAgICAgICAgICAgICAgICAgICAgICBzdHlsZT0ibWFyZ2luLWxlZnQ6IDNweDttYXJnaW4tdG9wOiAycHgiCiAgICAgICAgICAgICAgICAgICAgICA6Y2xhc3M9InRhZ0NsYXNzKGl0ZW0pIgogICAgICAgICAgICAgICAgICAgICAgQGNsaWNrPSJhZGRUYWcoaXRlbSkiCiAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAge3sgaXRlbS5uYW1lIH19CiAgICAgICAgICAgICAgICAgICAgPC9lbC10YWc+CiAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICA8ZWwtYnV0dG9uIHR5cGU9InByaW1hcnkiIHBsYWluIHNsb3Q9InJlZmVyZW5jZSIgc2l6ZT0ic21hbGwiPgogICAgICAgICAgICAgICAgICAgIOa3u+WKoOagh+etvgogICAgICAgICAgICAgICAgICA8L2VsLWJ1dHRvbj4KICAgICAgICAgICAgICAgIDwvZWwtcG9wb3Zlcj4KICAgICAgICAgICAgICA8L2VsLWZvcm0taXRlbT4KICAgICAgICAgICAgPC9lbC1jb2w+CiAgICAgICAgICAgIDxlbC1jb2wgOnNwYW49IjYuNSI+CiAgICAgICAgICAgICAgPGVsLWZvcm0taXRlbSBsYWJlbD0i5YiG57G7IiA6bGFiZWwtd2lkdGg9ImZvcm1MYWJlbFdpZHRoIiBwcm9wPSJjYXRlZ29yeU5hbWUiPgogICAgICAgICAgICAgICAgICA8ZWwtdGFnCiAgICAgICAgICAgICAgICAgICAgdHlwZT0ic3VjY2VzcyIKICAgICAgICAgICAgICAgICAgICB2LXNob3c9ImFydGljbGUuY2F0ZWdvcnlOYW1lIgogICAgICAgICAgICAgICAgICAgIHN0eWxlPSJtYXJnaW46MCAxcmVtIDAgMCIKICAgICAgICAgICAgICAgICAgICA6Y2xvc2FibGU9InRydWUiCiAgICAgICAgICAgICAgICAgICAgQGNsb3NlPSJyZW1vdmVDYXRlZ29yeSIKCiAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICB7eyBhcnRpY2xlLmNhdGVnb3J5TmFtZSB9fQogICAgICAgICAgICAgICAgICA8L2VsLXRhZz4KICAgICAgICAgICAgICAgICAgPCEtLSDliIbnsbvpgInpobkgLS0+CiAgICAgICAgICAgICAgICAgIDxlbC1wb3BvdmVyCiAgICAgICAgICAgICAgICAgICAgcGxhY2VtZW50PSJib3R0b20tc3RhcnQiCiAgICAgICAgICAgICAgICAgICAgd2lkdGg9IjQ2MCIKICAgICAgICAgICAgICAgICAgICB0cmlnZ2VyPSJjbGljayIKICAgICAgICAgICAgICAgICAgICB2LWlmPSIhYXJ0aWNsZS5jYXRlZ29yeU5hbWUiCiAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwb3BvdmVyLXRpdGxlIj7liIbnsbs8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8IS0tIOi+k+WFpeahhiAtLT4KICAgICAgICAgICAgICAgICAgICA8ZWwtaW5wdXQgc3R5bGU9IndpZHRoOjEwMCUiIHYtbW9kZWw9ImNhdGVnb3J5TmFtZSIgcGxhY2Vob2xkZXI9Iuivt+i+k+WFpeWIhuexu+WQjSxlbnRlcua3u+WKoOiHquWumuS5ieWIhuexuyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQGtleXVwLmVudGVyLm5hdGl2ZT0ic2F2ZUNhdGVnb3J5IiAvPgogICAgICAgICAgICAgICAgICAgIDwhLS0g5YiG57G7IC0tPgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBvcG92ZXItY29udGFpbmVyIj4KICAgICAgICAgICAgICAgICAgICAgIDxkaXYgPua3u+WKoOWIhuexuzwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgPGVsLXRhZwogICAgICAgICAgICAgICAgICAgICAgICB2LWZvcj0iKGl0ZW0sIGluZGV4KSBvZiBjYXRlZ29yeSIKICAgICAgICAgICAgICAgICAgICAgICAgOmtleT0iaW5kZXgiCiAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPSJtYXJnaW4tbGVmdDogM3B4O21hcmdpbi10b3A6IDJweCIKICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImNhdGVnb3J5LWl0ZW0iCiAgICAgICAgICAgICAgICAgICAgICAgIEBjbGljaz0iYWRkQ2F0ZWdvcnkoaXRlbSkiCiAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgIHt7IGl0ZW0ubmFtZSB9fQogICAgICAgICAgICAgICAgICAgICAgPC9lbC10YWc+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPGVsLWJ1dHRvbiB0eXBlPSJzdWNjZXNzIiBwbGFpbiBzbG90PSJyZWZlcmVuY2UiIHNpemU9InNtYWxsIj4KICAgICAgICAgICAgICAgICAgICAgIOa3u+WKoOWIhuexuwogICAgICAgICAgICAgICAgICAgIDwvZWwtYnV0dG9uPgogICAgICAgICAgICAgICAgICA8L2VsLXBvcG92ZXI+CiAgICAgICAgICAgICAgPC9lbC1mb3JtLWl0ZW0+CiAgICAgICAgICAgIDwvZWwtY29sPgogICAgICAgICAgICA8ZWwtY29sIDpzcGFuPSI2LjUiPgogICAgICAgICAgICAgIDxlbC1mb3JtLWl0ZW0gOmxhYmVsLXdpZHRoPSJmb3JtTGFiZWxXaWR0aCIgbGFiZWw9IuaYr+WQpue9rumhtiIgcHJvcD0iaXNTdGljayI+CiAgICAgICAgICAgICAgICA8ZWwtcmFkaW8tZ3JvdXAgdi1tb2RlbD0iYXJ0aWNsZS5pc1N0aWNrIiBzaXplPSJzbWFsbCI+CiAgICAgICAgICAgICAgICAgIDxlbC1yYWRpbyB2LWZvcj0iKGl0ZW0saW5kZXgpIGluIHllc09yTm9MaXN0IiA6bGFiZWw9ImluZGV4IiBib3JkZXI+e3sgaXRlbSB9fTwvZWwtcmFkaW8+CiAgICAgICAgICAgICAgICA8L2VsLXJhZGlvLWdyb3VwPgogICAgICAgICAgICAgIDwvZWwtZm9ybS1pdGVtPgogICAgICAgICAgICA8L2VsLWNvbD4KICAgICAgICAgICAgPGVsLWNvbCA6c3Bhbj0iNi41Ij4KICAgICAgICAgICAgICA8ZWwtZm9ybS1pdGVtIDpsYWJlbC13aWR0aD0iZm9ybUxhYmVsV2lkdGgiIGxhYmVsPSLmmK/lkKblj5HluIMiIHByb3A9ImlzUHVibGlzaCI+CiAgICAgICAgICAgICAgICA8ZWwtcmFkaW8tZ3JvdXAgdi1tb2RlbD0iYXJ0aWNsZS5pc1B1Ymxpc2giIHNpemU9InNtYWxsIj4KICAgICAgICAgICAgICAgICAgPGVsLXJhZGlvIHYtZm9yPSIoaXRlbSxpbmRleCkgaW4gcHVibGlzaExpc3QiIDprZXk9ImluZGV4IiA6bGFiZWw9ImluZGV4IiBib3JkZXI+e3sgaXRlbSB9fTwvZWwtcmFkaW8+CiAgICAgICAgICAgICAgICA8L2VsLXJhZGlvLWdyb3VwPgogICAgICAgICAgICAgIDwvZWwtZm9ybS1pdGVtPgogICAgICAgICAgICA8L2VsLWNvbD4KICAgICAgICAgIDwvZWwtcm93PgogICAgICAgICAgPGVsLXJvdz4KICAgICAgICAgICAgPGVsLWNvbCA6c3Bhbj0iNSI+CiAgICAgICAgICAgICAgPGVsLWZvcm0taXRlbSA6bGFiZWwtd2lkdGg9ImZvcm1MYWJlbFdpZHRoIiBsYWJlbD0i5piv5ZCm56eB5a+GIiBwcm9wPSJpc1NlY3JldCI+CiAgICAgICAgICAgICAgICA8ZWwtcmFkaW8tZ3JvdXAgdi1tb2RlbD0iYXJ0aWNsZS5pc1NlY3JldCIgc2l6ZT0ic21hbGwiPgogICAgICAgICAgICAgICAgICA8ZWwtcmFkaW8gdi1mb3I9IihpdGVtLGluZGV4KSBpbiBzZWNyZXRMaXN0IiA6bGFiZWw9ImluZGV4IiBib3JkZXI+e3sgaXRlbSB9fTwvZWwtcmFkaW8+CiAgICAgICAgICAgICAgICA8L2VsLXJhZGlvLWdyb3VwPgogICAgICAgICAgICAgIDwvZWwtZm9ybS1pdGVtPgogICAgICAgICAgICA8L2VsLWNvbD4KICAgICAgICAgICAgPGVsLWNvbCA6c3Bhbj0iNSI+CiAgICAgICAgICAgICAgPGVsLWZvcm0taXRlbSA6bGFiZWwtd2lkdGg9ImZvcm1MYWJlbFdpZHRoIiBsYWJlbD0i5Yib5L2c57G75Z6LIiBwcm9wPSJpc09yaWdpbmFsIj4KICAgICAgICAgICAgICAgIDxlbC1yYWRpby1ncm91cCB2LW1vZGVsPSJhcnRpY2xlLmlzT3JpZ2luYWwiIHNpemU9InNtYWxsIj4KICAgICAgICAgICAgICAgICAgPGVsLXJhZGlvIHYtZm9yPSIoaXRlbSxpbmRleCkgaW4gaXNPcmlnaW5hbExpc3QiIDpsYWJlbD0iaW5kZXgiIGJvcmRlcj57eyBpdGVtIH19PC9lbC1yYWRpbz4KICAgICAgICAgICAgICAgIDwvZWwtcmFkaW8tZ3JvdXA+CiAgICAgICAgICAgICAgPC9lbC1mb3JtLWl0ZW0+CiAgICAgICAgICAgIDwvZWwtY29sPgogICAgICAgICAgICA8ZWwtY29sIHYtaWY9ImFydGljbGUuaXNPcmlnaW5hbCA9PT0gMCIgOnNwYW49IjUiPgogICAgICAgICAgICAgIDxlbC1mb3JtLWl0ZW0gOmxhYmVsLXdpZHRoPSJmb3JtTGFiZWxXaWR0aCIgbGFiZWw9IuWOn+aWh+mTvuaOpSIgIHByb3A9Im9yaWdpbmFsVXJsIj4KICAgICAgICAgICAgICAgIDxlbC1pbnB1dCB2LW1vZGVsPSJhcnRpY2xlLm9yaWdpbmFsVXJsIj48L2VsLWlucHV0PgogICAgICAgICAgICAgIDwvZWwtZm9ybS1pdGVtPgogICAgICAgICAgICA8L2VsLWNvbD4KICAgICAgICAgICAgPGVsLWNvbCA6c3Bhbj0iNSI+CiAgICAgICAgICAgICAgPGVsLWZvcm0taXRlbSA6bGFiZWwtd2lkdGg9ImZvcm1MYWJlbFdpZHRoIiBsYWJlbD0i5YWz6ZSu6K+NIj4KICAgICAgICAgICAgICAgIDxlbC1pbnB1dCB2LW1vZGVsPSJhcnRpY2xlLmtleXdvcmRzIj48L2VsLWlucHV0PgogICAgICAgICAgICAgIDwvZWwtZm9ybS1pdGVtPgogICAgICAgICAgICA8L2VsLWNvbD4KICAgICAgICAgICAgPGVsLWNvbCA6c3Bhbj0iNSI+CiAgICAgICAgICAgICAgPGVsLWZvcm0taXRlbSA6bGFiZWwtd2lkdGg9ImZvcm1MYWJlbFdpZHRoIiBsYWJlbD0i5aSH5rOoIj4KICAgICAgICAgICAgICAgIDxlbC1pbnB1dCB2LW1vZGVsPSJhcnRpY2xlLnJlbWFyayI+PC9lbC1pbnB1dD4KICAgICAgICAgICAgICA8L2VsLWZvcm0taXRlbT4KICAgICAgICAgICAgPC9lbC1jb2w+CiAgICAgICAgICA8L2VsLXJvdz4KICAgICAgICAgIDxlbC1yb3c+CiAgICAgICAgICAgIDxlbC1jb2wgOnNwYW09IjI0Ij4KICAgICAgICAgICAgICA8ZWwtZm9ybS1pdGVtIDpsYWJlbC13aWR0aD0iZm9ybUxhYmVsV2lkdGgiIGxhYmVsPSLlhoXlrrkiIHByb3A9ImNvbnRlbnRNZCI+CiAgICAgICAgICAgICAgICA8bWF2b24tZWRpdG9yIHBsYWNlaG9sZGVyPSLovpPlhaXmlofnq6DlhoXlrrkuLi4iICBzdHlsZT0iaGVpZ2h0OiA1MDBweCIgcmVmPW1kCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHYtbW9kZWw9ImFydGljbGUuY29udGVudE1kIiBAaW1nRGVsPSJpbWdEZWwiIEBjaGFuZ2U9IiIgQGltZ0FkZD0iaW1nQWRkIi8+CiAgICAgICAgICAgICAgPC9lbC1mb3JtLWl0ZW0+CiAgICAgICAgICAgIDwvZWwtY29sPgogICAgICAgICAgPC9lbC1yb3c+CiAgICAgICAgPC9lbC1mb3JtPgogICAgICAgIDxzcGFuIHNsb3Q9ImZvb3RlciIgY2xhc3M9ImRpYWxvZy1mb290ZXIiPgogICAgICAgICAgICA8ZWwtYnV0dG9uIEBjbGljaz0iY2VudGVyRGlhbG9nVmlzaWJsZSA9IGZhbHNlIj7lj5Yg5raIPC9lbC1idXR0b24+CiAgICAgICAgICAgIDxlbC1idXR0b24gdi1pZj0iY2FuQWRkIHx8IGNhblVwZGF0ZSIgdHlwZT0icHJpbWFyeSIgIEBjbGljaz0ic3VibWl0Ij7noa7lrpo8L2VsLWJ1dHRvbj4KICAgICAgICA8L3NwYW4+CiAgICAgIDwvZWwtZGlhbG9nPgogICAgPC9kaXY+CgoKICAgIDxlbC1kaWFsb2cgdGl0bGU9IuaWh+eroOaKk+WPliIgOnZpc2libGUuc3luYz0iZGlhbG9nVGFibGVWaXNpYmxlIj4KICAgICAgPGVsLWZvcm0+CiAgICAgICAgPGVsLWZvcm0taXRlbSBsYWJlbD0i5oqT5Y+W57G75Z6LIiA6bGFiZWwtd2lkdGg9ImZvcm1MYWJlbFdpZHRoIj4KICAgICAgICAgIDxlbC1yYWRpby1ncm91cCB2LW1vZGVsPSJyZXB0aWxlLnR5cGUiIHNpemU9InNtYWxsIj4KICAgICAgICAgICAgPGVsLXJhZGlvICA6bGFiZWw9IjAiIGJvcmRlcj5DU0ROPC9lbC1yYWRpbz4KICAgICAgICAgICAgPGVsLXJhZGlvIGRpc2FibGVkICA6bGFiZWw9IjEiIGJvcmRlcj5PU0NISU5BPC9lbC1yYWRpbz4KICAgICAgICAgIDwvZWwtcmFkaW8tZ3JvdXA+CiAgICAgICAgPC9lbC1mb3JtLWl0ZW0+CiAgICAgICAgPGVsLWZvcm0taXRlbSBsYWJlbD0i55uu5qCH5Zyw5Z2AdXJsIiA6bGFiZWwtd2lkdGg9ImZvcm1MYWJlbFdpZHRoIj4KICAgICAgICAgIDxlbC1pbnB1dCB2LW1vZGVsPSJyZXB0aWxlLnVybCIgYXV0b2NvbXBsZXRlPSJvZmYiPjwvZWwtaW5wdXQ+CiAgICAgICAgPC9lbC1mb3JtLWl0ZW0+CiAgICAgICAgPGVsLWZvcm0taXRlbSBsYWJlbD0idGlwIiA6bGFiZWwtd2lkdGg9ImZvcm1MYWJlbFdpZHRoIiB2LWlmPSIhaXNFZGl0Rm9ybSI+CiAgICAgICAgICA8c3BhbiBzdHlsZT0iY29sb3I6IGxpbWVncmVlbiI+CiAgICAgICAgICAgIOivt+azqOaEj+WmguS4i+WHoOeCuTo8YnIvPgogICAgICAgICAgICAxLuWmguaenOaKk+WPluaIkOWKn+WImeS8muiHquWKqOS/neWtmOWIsOaWh+eroOihqOS4rTxici8+CiAgICAgICAgICAgIDIuQ1NETueahOaWh+eroOayoeacieWwgemdouWbvueJh++8jOaJgOS7peS8muaYr+maj+acuuWbvueJhzxici8+CiAgICAgICAgICAgIDMu5pqC5pe25Y+q5pSv5oyBQ1NETueahOaWh+eroOaKk+WPlgogICAgICAgICAgPC9zcGFuPgogICAgICAgIDwvZWwtZm9ybS1pdGVtPgogICAgICA8L2VsLWZvcm0+CiAgICAgIDxkaXYgc2xvdD0iZm9vdGVyIiBjbGFzcz0iZGlhbG9nLWZvb3RlciI+CiAgICAgICAgPGVsLWJ1dHRvbiBAY2xpY2s9ImRpYWxvZ1RhYmxlVmlzaWJsZSA9IGZhbHNlIj7lj5Yg5raIPC9lbC1idXR0b24+CiAgICAgICAgPGVsLWJ1dHRvbiA6bG9hZGluZz0ibG9hZGluZ1JlcHRpbGUiIHR5cGU9InByaW1hcnkiIEBjbGljaz0iaGFuZGxlUmVwdGlsZSI+56GuIOWumjwvZWwtYnV0dG9uPgogICAgICA8L2Rpdj4KICAgIDwvZWwtZGlhbG9nPgogIDwvZGl2Pgo="},null]}