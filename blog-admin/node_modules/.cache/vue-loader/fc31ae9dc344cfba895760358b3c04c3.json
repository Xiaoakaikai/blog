{"remainingRequest":"D:\\javaResource\\shiyi-blog-master\\blog-admin\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\javaResource\\shiyi-blog-master\\blog-admin\\src\\views\\site\\dict\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\javaResource\\shiyi-blog-master\\blog-admin\\src\\views\\site\\dict\\index.vue","mtime":1675760965000},{"path":"D:\\javaResource\\shiyi-blog-master\\blog-admin\\node_modules\\babel-loader\\lib\\index.js","mtime":1680778862378},{"path":"D:\\javaResource\\shiyi-blog-master\\blog-admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1680778862035},{"path":"D:\\javaResource\\shiyi-blog-master\\blog-admin\\node_modules\\vue-loader\\lib\\index.js","mtime":1680778857385}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}