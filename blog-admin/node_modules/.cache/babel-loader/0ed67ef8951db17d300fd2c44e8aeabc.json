{"remainingRequest":"E:\\projects\\blog\\blog-admin\\node_modules\\thread-loader\\dist\\cjs.js!E:\\projects\\blog\\blog-admin\\node_modules\\babel-loader\\lib\\index.js!E:\\projects\\blog\\blog-admin\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!E:\\projects\\blog\\blog-admin\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\projects\\blog\\blog-admin\\src\\views\\articles\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\projects\\blog\\blog-admin\\src\\views\\articles\\index.vue","mtime":1681716099722},{"path":"E:\\projects\\blog\\blog-admin\\babel.config.js","mtime":1675760965000},{"path":"E:\\projects\\blog\\blog-admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1680778862035},{"path":"E:\\projects\\blog\\blog-admin\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1680778862494},{"path":"E:\\projects\\blog\\blog-admin\\node_modules\\babel-loader\\lib\\index.js","mtime":1680778862378},{"path":"E:\\projects\\blog\\blog-admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1680778862035},{"path":"E:\\projects\\blog\\blog-admin\\node_modules\\vue-loader\\lib\\index.js","mtime":1680778857385}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}